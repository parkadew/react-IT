
전역 상태관리(global state management)

왜 사용해야할까? -> 
    프롭스 드릴링을 예방하기 위해서
    하위의 하위의 하위의 컴포넌트에 props를 전달 해야하는데 이렇게 되면 
    props가 어디서 왔는지 추적이 어려워지기때문에 전역 상태로 관리하여 사용하면 더 편리하게 관리 할 수 있다.

    불효하지않기 위해 사용?
    -> 부모가 자식 컨포넌트에게 값을 전달하기 만을 위해 필요없는 상태를 알고있어야할떄
    
    전역 상태를 언제 사용해야하는지는 확실히 알았다.
    그리 어려운 내용은 아니였구나.
    
    그렇다면 리액트에서 전역상태 관리를 하는법은 뭐가 있을까 ??
    
    1. Context API
        리액트에 내장된 전역 상태 관릴ㄹ 위한 빌트인 객체, 훅함수로 관리 가능
        단점
            - 보일러 코드 (사용하기 위해서 작성해야하는 코드가 많음)
            - 리렌더링 최적화가 어렵다. (전역상태 -> 화면 전체가 리랜더링)
            - 백엔드에서 받아온 데이터를 전역상태 관리하기 힘들다.

    2. 라이브러리(전역상태)
        redux -> 배워보자
            - 현재 사라져야하는 전역 상태 관리 라이브러리 이지만은 꼭 알고 넘어가야한다.
            - 이유는 현재 시장에서 이전에 만들었던 프로젝트의 유지보수와, 스택에 맞추기 위해 사용하는 경우가 많기 때문

        modex
        recoil -> 배워보자
            - 최근에는 사용하는 경우가 적지만, 사용했던 프로젝트들이 다수 있고, 최근 유행하는 jotai가 recoil 경량화 버전

        jotail
        zustand

        
지역변수 <--> 전역변수
    코드블럭 (특정 스코프) - 지역변수
    코드전체 (전역 스코프) - 전역변수

    상태 <--> 전역 상태
    특정 컴포넌트 내에서만 사용하는 상태 - 상태 : 단, props로 전달하면 하위 컴포넌트로 내려주는것이 가능
    컴포넌트 구분 없이 모든 컴포넌트에서 접근이 가능한 상태 - 전역 상태
    


useReducer
    1) 복잡한 상태 변화를 재사용한다
    
    state -> 변경하는 로직이 100줄
          -> 

useReducer 언제 사용해야할까?

1) 상태의 변화를 재사용해야할 때
    => 상태 변경이 로직이 너무 복잡해서 다시 짜기 힘들떄, 반복될때

상태의 변화를 중앙에서 집중적으로 관리하기 위해서 
상태는 컴포넌트 프롭스로 전달되며 관계가 복잡해지고 추적이 어려워 질수 있음

=> 관리해야하는 포인트를 한곳에 몰아서 쉽게 관리하기 위해 사용
=> 커스텀 훅이 등장하면 서 복잡한 로직 재사용이 쉬워짐
=> 보통 요즘은 -> 나는 상태의 변화가 분기가 많을 떄 사용할것이다.
=> 상태의 변화를 재사용해야할떄 

커스텀 훅 => 훅 함수가 포함된 함수를 재사용하기 위해

================

useReducer는 상태관리(변경)을 중앙에서 관리하고
분기에 따른 상태 변경을 쉽게하기 위해 사용하는 훅함수이며

커스텀 훅은 훅함수를 포함한 함수를 재사용하기 위해서 사용하는데
이런 면에서 useReducer와 비슷한 부분이 있음, 단 커스텀 훅의 등장으로 useReducer는 잘 사용되지 않습니다.

UseReducer는 분기가 많이 생성될 떄 사용할 수 있다 -> 반드시 써야한다 x

이거 자주사용하지도 않는데 UseReducer 왜 배워야해 씨입팔!!!
redux떄무네..

 flux pattern - > 단방향으로 데이터가 흐른다.? -> 뒤를 보지않아 -> 
 전달해주는 매개체가 dispatch -> 뭘전달..?
 단방향으로 데이터 전달됩니다.

 reducer(store) --> view --> dispatch(action) ---> state 변경
 창고                 화면     전달체    
 에러 추적이 당연히 용이하겠지?

 먼저 reducer 생성했지

 =====

 useReducer는 언제 사용해야할까?

 1) 상태의 변화를 재사용해야할떄
    => 상태 변경이 로직이 너무 복잡해서 다시 짜기 힘들떄, 반복될떄

상태의 변화를 중앙에서 관리하기 위해서
상태는 컴포넌트 프롭스로 전달되며 관계가 복잡해지고 추적이 어려워질 수 있는데

=> 관리해야하는 포인트를 한군데로 몰아서 쉽게 관리하기 위해서
=> 커스텀 훅이 등장하면서 복잡한 로직 재사용이 쉬워졌음

=> 상태의 변화가 분기가 많을 떄 (대기 -> 녹음 중 -> 녹음 종료 -> 대기)

커스텀훅
    -> 이건 왜 쓰는거야
    재사용하는 훅함수가 포함된 함수를 재사용하기 위해

=====

    useReducer는 상태 관리(변경)를 중앙에서 관리하고 
    분기에 따른 상태 변경을 쉽게하기 위해서 사용하는 훅함수 이며

    커스텀훅은 훅함수를 포함한 함수를 재사용하기 위해 사용하는데
    이런 면에서 useReducer와 비슷한 부분이 있음, 단 커스텀 훅의 등장으로 useReducer는 잘 사용되지 않습니다.

    useReducer는 분기가 많이 생성될 떄 사용할 수 있다 -> 반드시 써야한다 x

    자주 사용하지도 않는데 useReducer를 왜 배워야할까? -> redux (중앙 집중 관리 전역 상태 도구)

-----

flux pattern
단방향으로 데이터 전달됩니다.

reducer(store) ---> view --> dispatch(action) -> state 변경
에러 추적이 용이하다.

-----



