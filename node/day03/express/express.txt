
express

nodejs 내장되어있는 'http'모듈이 존재하지만, 다른 도구에 의존해야하는 불편함이 존재하지만
express는 다른 모듈에 의존하지 않고 대부분의 웹 서버 기능을 구현 가능

package.json 생성 (npm init) --- 경로 ( 내가 프로젝트를 시작 하고싶은 폴너 내)
npm i express (설치) 


nodemon

------------------------

수업 끝나고 뭐해야할까?
(자바스크립트 코테 강의)

1. 부족한거!!!!--> 두고 온거 하지 않은거
1-1. javascript check-list
1-2. react check-list 

1-3. deep dive javascript (study) -- 독서
    -- 내용 요약해서 적기 
     쏙쏙 들어오는 함수형 코딩(study)
    우아한 타임스크립트(study)
     deep dive react (study)
1-7. 코딩테스트 알고리즘 문제풀이(study) -- 알고리즘

1-8. todolist 안보고 만들기

1-9. open-api를 통해서 프로젝트 간단하게 1~2개

1-10. 페이지네이션, 무한 스크롤링, 스켈레톤

----프로젝트 준비

2. react만 사용하는 프로젝트들 (2~3개월) --선택

3. 타입스크립트 공부하면서, 이력서, 면접준비 지원 (1~2개월) --> 

4. NEXT - JS / REACT-TYPESCRIPT 프로젝트 (선택)
이력서 : next, typescript, react, 진행중 프로젝트 1개

5. NEXT + REACT + TYPESCRIPT 프로젝트 (2~3개월) / NEXT-JS(1개월)
(회사 지원하면서 -- 채용 프로세스 : 1달~2달, 2달~4달)

서버 재실행할 필요 없이 코드의 변동이 생기면 저장 단축키로 서버 자동 재실행
npm i nodemon

-- 인증 로직

client ---request(email,pw) --> back ----(email, pw) ---> db
        <--------response---------

        1. 인증토큰 (고유번호를 암호화하여 클라이언트에 전달)
        2. 세션 (key를 사용하여 백엔드에 저장된 데이터를 검색)


    const response = {
        token: 암호화된 값,
        info: {
            profile_url:"",
            nickName: ""
        }
    }

-------------------------
암호화 => 내 고유 번호이기 떄문에 암호화 해야함

인증토큰 (여러분을 증명하는 수단, 암호화된 값, 생명주기 짧은 편)
back(발급) --> client --> back(전달)

리프레시 토큰 ( 인증 토큰을 재발급 받는 수단, 생명주기 긴 편)

------------------------------------