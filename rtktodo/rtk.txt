
redux 사용하는 이유 3가지

1.전역상태관리
2. 단방향 데이터 흐름을 통한 상태 중앙 관리 -> 에러 추적 용이
3. 다양한 플러그인 및 미들웨어 지원

=> redux의 단점
사용하기 위해 작성해야하는 코드가 많으며, 중앙 상태 관리를 강요

@redux-tool-kit (RTK)
=> redux의 단점을 보완하고자 나온 라이브러리이지만, 아쉽게도 큰 호응은 얻지 못했음
=> redux의 플러그인들을 자체 설치 <-- (다른 사람이 만든 라이브러리), 다른 사람들이 관리 안하면 지원을 안해요
=> rtk는 플러그인들을 자체 지원 (devtools, middle ware)
=> 작성하기 위한 코드는 쬐끔 줄어들었다.

현재 실무에서 가장 많이 사용하는 전역 상태 관리 도구

1. redux + saga/thunk/rtk
2. mobx
3. jotai, zustand
4. recoil

- 원티드,점핏,

msw (mocking api )

프론트엔드 개발자
백엔드 개발자가 동시에 개발을 시작

백엔드 api(주소)가 나오지 않으면 개발을 멈춰야한다?
아니면 백엔드 api를 가상으로 만들어 개발을 이어가야한다.

백엔드가 

---

test 코드

A라는 기능을 개발 --> B라는 기능에 이슈가 생길 수 있을까요?
여러분들은 개발을 할떄마다 처음부터 끝까지 정상 작동하는지 직접확인
HR이 발생, 사람보다 기계로 테스트하는 것이 훨씬 저렴하고 속도가 빠르지 않을까?
내가 개발한 기능을 테스트하는 코드를 작성해보자 --> "테스트 코드"

jest, vi-test

TDD(test driven development) 테스트 주도 개발
실제 기능을 작성하기 전에 테스트 코드를 먼저 작성하고 기능을 개발

반면에 프론트엔드는 테스트코드를 엄격하게 작성하지 않아요 -> 변경이 많다
변경이 될 떄마다, 테스트 코드도 함께 수정해야한다 -> 리소스 발생

간단한 모듈 테스트나,e2e 테스트
프론트엔드 테스트 코드를 작성할 떄 "백엔드에 요청" --> 실제 유저가 회원가입(유령회원) -> 백엔드가 작동하지 않으면 프론트는 테스트 코드를 작동하지 못한다.

한계가 발생(불편함) => msw => 백엔드를 모킹하고 백엔드와 상관없이 프론트엔드를 개발 및 테스트 할 수 있도록
