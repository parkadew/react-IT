 1. store 파일을 생성한다


// src/store.js
import { createStore } from 'redux';

// 초기 상태 설정
const initialState = {
  todos: [
    {
      id: 1,
      title: "example-1",
      content: "example-1-1"
    },
    {
      id: 2,
      title: "example-2",
      content: "example-1-2"
    },
  ]
};

// 리듀서 정의
function rootReducer(state = initialState, action) {
  switch (action.type) {
    case 'ADD_TODO':
      return {
        ...state,
        todos: [...state.todos, action.payload]
      };
    case 'UPDATE_TODO':
      return {
        ...state,
        todos: state.todos.map(todo =>
          todo.id === action.payload.id ? { ...todo, ...action.payload } : todo
        )
      };
    case 'DELETE_TODO':
      return {
        ...state,
        todos: state.todos.filter(todo => todo.id !== action.payload.id)
      };
    default:
      return state;
  }
}

// 스토어 생성
const store = createStore(rootReducer);

export default store;


2.리액트 애플리케이션에 리덕스 스토어 제공
리덕스 스토어를 리액트 애플리케이션에 제공하기 위해 index.js 파일에 provider로 store를 보내준다.

// src/index.js
import React from 'react';
import ReactDOM from 'react-dom';
import { Provider } from 'react-redux';
import App from './App';
import store from './store';

ReactDOM.render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById('root')
);

*******
이 말은 즉 usedispatch를 사용해서 actions.js 에 있는 const addTodo를 호출해서 여기에 매개변수로 newtodo를 전달하면 그 newtodo가 액션 객체에서 payload의 todo가 된다는거지 근데
 switch (action.type) {
        // switch 문을 사용하여 액션의 type에 따라 상태를 업데이트합니다.(action.jsx파일을 확인해보면 알수있다.) 
        case 'ADD_TODO':
            return {
                ...state,
                todos: [...state.todos, action.payload]
            };
여기서 action.payload만 보이고 todo는 안보이는데? action.payload하면 todo가 전달되는거야? 

-> dispatch(addTodo(newTodo))를 호출하면 newTodo 객체가 액션 생성자 addTodo의 매개변수로 전달되고, 이는 액션 객체의 payload 속성으로 설정됩니다.


3. 액션 제공

// src/actions.js
export const addTodo = (todo) => ({
  type: 'ADD_TODO',
  payload: todo
});

export const updateTodo = (todo) => ({
  type: 'UPDATE_TODO',
  payload: todo
});

export const deleteTodo = (id) => ({
  type: 'DELETE_TODO',
  payload: { id }
});

이제 컴포넌트에서 리덕스 상태와 디스패치를 사용하여 투두리스트를 관리할 수 있습니다.



