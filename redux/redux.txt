useReducer --> 알아야하는데..

Redux
: 상태 관리를 중앙에서 하기 위한 도구 ---> 전역 상태
: 상태 변경이나 상태와 관련된 모든 것을 컴포넌트와 분리하여 관리하겠다 (Context + Reducer)

: flux pattern
양방향이 아닌 단방향으로 데이터를 관리할 수 있다 -> react
store (reducer) ----> view (state) -> dispatch (action) -> store
데이터가 단방향으로 흐르기 때문에 에러 추적이 용이하다는 장점

: 개발자 도구(devtools), 혹은 다양한 추가 라이브러리 등을 제공함으로서 사용에 편리
로거 (action, prev, next), 히스토리 (상태가 여러차례, 어디서 에러가 발생했는지 되돌리기)
전역 상태 관리의 단점인 상태가 어디서 어떻게 변했는지 어렵다는 것을 극복

백엔드에서 받아온 데이터의 통신을 전역 상태로 중앙 관리하기 어려움

백엔드에 요청은 무조건 성공하나요 실패할 수도 있나요?
요청과 결과에 따라 모두다 상태 변경

    dispatch({
        type: post_request
        payload: {}
    }) -- 로딩중
    try{
        const response = axios...
        dispatch({
            type: post_success,
            payload: response.data
        }) -- 성공
    } catch (error) {
        dispatch({
            type: post_failure,
            payload: error.message
        }) -- 실패
    }

redux saga, thunk라고 하는 도구를 하면 이런 과정이 쉬워집니다

-----------------------------------------------------------------------------------------

context와 reducer 써보면서 불편했던 점 —> 단순히 상태 사용하는 것보다 사용하기 위해 작성하는 코드가 많습니다
mobx, recoil, jotai, zustand와 같은 더 경량화 되고 쉬운 라이브러리들이 많이 등장하면서 —> 자주 사용하지 않는 라이브러리